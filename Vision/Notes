Kernel or Mask or Filter : Non uniform weighted matrix
In image processing, a kernel, convolution matrix, or mask is a small matrix. It is used for blurring, 
sharpening, embossing, edge detection, and more. This is accomplished by doing a convolution between a kernel and an image
Smoothing is same as blurring. Helps to reduce noise.
Bigger kernel generally means bigger sigma( variance ).
Convolution : Flips in both directions.
Convolution vs Correlation only matters if we have an asymmetric filter. Otherwise output is same.
Shift Invariant : Operator behaves the same everywhere i.e the value of the output depends on the pattern in the image neighborhood,
not on the position of the neighborhood( eg: left or right or top or bottom).

          0 0 0
Impulse : 0 1 0
          0 0 0
          
Original Image + Impulse : No change( Original image)
Original Image + not centered impulse( 0 0 0   : Shifted left by 1 pixel with correlation
                                       0 0 1
                                       0 0 0)
                                       
Original Image + Box filter( 1 1 1   : Blur image
                             1 1 1 
                             1 1 1 )

If suppose our filter is : 0 0 0    
                           0 2 0  -  Box filter => Sharpened image
                           0 0 0 
Median filter is edge preserving. It is also a non linear filter.

How do we handle noise?
Filter / Smooth

Basis : Basis of a vector space V is a linearly independent subset of V that spans V.
Fourier Transform : Any periodic signal can be represented as a sum of sinusoids.

Convolution is a neighborhood operation in which each output pixel is the weighted sum of neighboring input pixels.
A convolution kernel is a correlation kernel that has been rotated 180 degrees.
For example, suppose the image is

A = [17  24   1   8  15
     23   5   7  14  16
      4   6  13  20  22
     10  12  19  21   3
     11  18  25   2   9]
and the correlation kernel is

h = [8   1   6
     3   5   7
     4   9   2]
You would use the following steps to compute the output pixel at position (2,4):

- Rotate the correlation kernel 180 degrees about its center element to create a convolution kernel.
- Slide the center element of the convolution kernel so that it lies on top of the (2,4) element of A.
- Multiply each weight in the rotated convolution kernel by the pixel of A underneath.
- Sum the individual products from step 3.
Hence the (2,4) output pixel is
1.2 + 8.9 + 15.4 + 7.7 + 14.5 + 16.3 + 13.6 + 20.1 + 22.8 = 575

In spatial domain , we deal with images as it is. The value of the pixels of the image change with respect to scene. 
Whereas in frequency domain , we deal with the rate at which the pixel values are changing in spatial domain.

Spatial Domain 
----------------
Input Image Matrix => Processing => Output image matrix

Frequency Domain
-----------------
Input Image => Frequency distribution => Processing => Inverse transformation => Output Image

TRANSFORMATION.
A signal can be converted from time domain into frequency domain using mathematical operators 
called transforms. There are many kind of transformation that does this. Some of them are given below.
- Fourier Series
- Fourier transformation
- Laplace transform
- Z transform

FREQUENCY COMPONENTS
Any image in spatial domain can be represented in a frequency domain. But what do this frequencies actually mean.
We will divide frequency components into two major components.

HIGH FREQUENCY COMPONENTS
High frequency components correspond to edges in an image.

LOW FREQUENCY COMPONENTS
Low frequency components in an image correspond to smooth regions.

Convolution in spatial domain is equivalent to multiplication in frequency domain.

     Spatial domain(x)            |              Frequency domain(u)
g = f * h where * is convolution                      G = F . H
Conversely also,
g = f.h                                               G = F * H where * is convolution
